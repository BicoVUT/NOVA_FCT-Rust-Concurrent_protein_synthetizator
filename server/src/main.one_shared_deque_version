mod server_test;

use std::io::{Read, Write};
use std::net::{TcpListener, TcpStream};
use std::thread;
use serde::{Deserialize, Serialize};
use std::sync::{Arc, Mutex, Condvar};
use std::sync::atomic::{AtomicU16, Ordering};
use crossbeam_deque::{Injector, Steal};
use regex::Regex;
use std::time::Duration; 

use num_cpus;

///////////////////// Useful Structs /////////////////////

// server-client stuff

#[derive(Serialize, Deserialize, Debug)]
struct Request {
    request_type: String,
    data: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct Response {
    result_type: String,
    data: String,
    valid: bool,
}


// internal stuff

struct Task {
    request: String,
    finished: Arc<(Mutex<bool>, Condvar)>,
    result: Arc<Mutex<String>>,
    translate: bool,
    client: String
}

struct HandlingRequest {
    request: String,
    finished: Arc<(Mutex<bool>, Condvar)>,
    result: Arc<Mutex<String>>,
    translate: bool,
    client: String
}

struct Capacities {
    max_request_workers: usize,
    num_request_workers: AtomicU16,
    max_work_workers: usize,
    max_work_workers_per_request: usize,
    num_work_workers: AtomicU16,
    minimum_codon_processing_unit: usize,
    // depending on the size of the total workload different splits might make more or less sense
    // for instance, for a request of 12 codons it might not make sense to split it into 12 tasks
    // as the overhead of splitting, waiting for each task and combining is too high
    // finding the best split is quite intricate - here we just enable setting a minimum
    // workload size, from which onward we split into max_work_workers_per_request tasks
}

//////////////////// Basic Functionality & Helpers ////////////////////

// function to check if the DNA sequence is valid
// DNA sequence is valid if it only contains the letters C, G, A and T
// and its length is a multiple of three
fn is_valid_dna_sequence(input: &str) -> bool {
    let re = Regex::new(r"^[CGAT]+$").unwrap();
    re.is_match(input) && input.len() % 3 == 0
}

// function to transcribe DNA to mRNA by replacing all T's with U's
fn transcribe_dna(dna: &str) -> String {    
    let re = Regex::new(r"[T]").unwrap();
    let result = re.replace_all(dna, "U");
    result.to_string()
}

// function to translate triples of mRNA to protein
fn translate_codon(codon: &str) -> String {
    match codon {
        "UUU" | "UUC"                                   => "Phe".to_string(),
        "UUA" | "UUG" | "CUU" | "CUC" | "CUA" | "CUG"   => "Leu".to_string(),
        "AUU" | "AUC" | "AUA"                           => "Ile".to_string(),
        "AUG"                                           => "Met".to_string(),
        "GUU" | "GUC" | "GUA" | "GUG"                   => "Val".to_string(),
        "UCU" | "UCC" | "UCA" | "UCG"                   => "Ser".to_string(),
        "CCU" | "CCC" | "CCA" | "CCG"                   => "Pro".to_string(),
        "ACU" | "ACC" | "ACA" | "ACG"                   => "Thr".to_string(),
        "GCU" | "GCC" | "GCA" | "GCG"                   => "Ala".to_string(),
        "UAU" | "UAC"                                   => "Tyr".to_string(),
        "UAA" | "UAG" | "UGA"                           => "STOP".to_string(),
        "CAU" | "CAC"                                   => "His".to_string(),
        "CAA" | "CAG"                                   => "Gln".to_string(),
        "AAU" | "AAC"                                   => "Asn".to_string(),
        "AAA" | "AAG"                                   => "Lys".to_string(),
        "GAU" | "GAC"                                   => "Asp".to_string(),
        "GAA" | "GAG"                                   => "Glu".to_string(),
        "UGU" | "UGC"                                   => "Cys".to_string(),
        "UGG"                                           => "Trp".to_string(),
        "CGU" | "CGC" | "CGA" | "CGG" | "AGA" | "AGG"   => "Arg".to_string(),
        "AGU" | "AGC"                                   => "Ser".to_string(),
        "GGU" | "GGC" | "GGA" | "GGG"                   => "Gly".to_string(),
        _     => "Invalid nucleotide sequence".to_string(),
    }
}

// function to translate a mRNA sequence to amino acids
fn translate(mRNA: &str) -> String {
    let mut result = String::new();
    let mut i = 0;
    while i < mRNA.len() {
        let codon = &mRNA[i..i+3];
        result.push_str(&translate_codon(codon));
        i += 3;
    }
    return result;
}

// returns workload per worker with division as equally as possible
fn workload_divider(workload_length: usize, num_workers: usize, in_triplets: bool) -> Vec<usize> {
    let mut workload = Vec::new();
    let mut workload_length = workload_length;
    if in_triplets {
        workload_length = workload_length / 3;
    }
    let workload_per_worker = workload_length / num_workers;
    let mut remainder = workload_length % num_workers;
    for _ in 0..num_workers {
        if remainder > 0 {
            workload.push(workload_per_worker + 1);
            remainder -= 1;
        } else {
            workload.push(workload_per_worker);
        }
    }
    if in_triplets {
        for i in 0..workload.len() {
            workload[i] = workload[i] * 3;
        }
    }
    return workload;
}

/////////////////// Worker Thread Functionality ///////////////////////

fn run_worker(injector : Arc<Injector<Arc<Task>>>, capacities: Arc<Capacities>) {
    println!("[Server] Worker {:?} is running", thread::current().id());
    loop {
        match injector.steal() {
            Steal::Success(i) => {
                work(i);
            }
            Steal::Empty => {
                println!("[Server] Worker {:?} is done", thread::current().id());
                // reduce the number of workers
                capacities.num_work_workers.fetch_sub(1, std::sync::atomic::Ordering::Relaxed);
                break;
            }
            Steal::Retry => {
                println!("[Server] Worker {:?} is retrying", thread::current().id());
            }
        }
    }
}

fn work(task: Arc<Task>) {
    println!("[Server for Client {:?}] Worker {:?} is working on task of length {}", task.client, thread::current().id(), task.request.len());
    let mut finished = task.finished.0.lock().unwrap();
    let mut result = task.result.lock().unwrap();
    // transcription or translation
    if task.translate {
        let intermediate = transcribe_dna(&task.request);
        *result = translate(&intermediate);
    } else {
        *result = transcribe_dna(&task.request);
    }
    *finished = true;
    task.finished.1.notify_one();
}

////////////////////// Request Handler Functionality //////////////////////

fn run_request_handler(request_injector : Arc<Injector<TcpStream>>, work_injector: Arc<Injector<Arc<Task>>>, capacities: Arc<Capacities>) {
    println!("[Server] Request-handler {:?} is running", thread::current().id());
    // let max_waits = 10;
    // let mut waits = 0;
    loop {
        let wi = Arc::clone(&work_injector);
        let cap: Arc<Capacities> = Arc::clone(&capacities);
        match request_injector.steal() {
            Steal::Success(mut stream) => {

                // maybe use other message type below
                // write to the stream that the server is ready
                let response = Response {
                    result_type: "Ready".to_string(),
                    data: "Server is ready".to_string(),
                    valid: true,
                };
                let response_json = serde_json::to_string(&response).unwrap();
                stream.write(response_json.as_bytes()).unwrap();
                stream.flush().unwrap();

                loop {
                    // read request from client
                    // human genome ~ 3 billion base pairs
                    // see https://i-base.info/ttfa/hiv-and-drug-resistance/appendix-2-supplementary-information-about-genetics/
                    let mut buffer = [0; 524288];

                    // set read timeout for 60 seconds
                    stream.set_read_timeout(Some(Duration::new(10, 0))).unwrap();
                    let result = stream.read(&mut buffer);
                    match result {
                        Ok(0) => {
                            // Zero-byte read, client has closed the connection
                            println!("[Server] Client disconnected from Server.");
                            break;
                        }
                        Err(_) => {
                            println!("[Server] Client disconnected / timed out.");
                            break;
                        }
                        _ => {}
                    }

                    let request_data = &buffer[0..result.unwrap()];
                    let request: Request = match serde_json::from_slice(request_data) {
                        Ok(r) => r,
                        Err(e) => {
                            let response = Response {
                                result_type: "Error".to_string(),
                                data: format!("Invalid JSON: {:?}", e),
                                valid: false,
                            };
                            let response_json = serde_json::to_string(&response).unwrap();
                            stream.write(response_json.as_bytes()).unwrap();
                            stream.flush().unwrap();
                            break;
                        }
                    };
                
                    let is_valid = is_valid_dna_sequence(&request.data);
                
                    // Handle the request based on request_type
                    let response = match request.request_type.as_str() {
                        "-transcribe" => {
                            // Create transcribe request
                            let work_finished = Arc::new((Mutex::new(false), Condvar::new()));
                            let work_result = Arc::new(Mutex::new(String::new()));
                            let request: HandlingRequest = HandlingRequest {
                                request: request.data.clone(),
                                finished: Arc::clone(&work_finished),
                                result: Arc::clone(&work_result),
                                translate: false,
                                client: stream.peer_addr().unwrap().to_string()
                            };
                            let request: Arc<HandlingRequest> = Arc::new(request);
                            handle_request(Arc::clone(&request), Arc::clone(&wi), Arc::clone(&cap));
                            // Wait for task to finish
                            let &(ref lock, ref cvar) = &*request.finished;
                            let mut finished = lock.lock().unwrap();
                            while !*finished {
                                finished = cvar.wait(finished).unwrap();
                            }
                            // Get result
                            let result = request.result.lock().unwrap();

                            Response {
                                result_type: "Transcribed".to_string(),
                                data: format!("{}", result),
                                valid: is_valid,
                            }
                        }
                        "-translate" => {
                            // Create translate request
                            let work_finished = Arc::new((Mutex::new(false), Condvar::new()));
                            let work_result = Arc::new(Mutex::new(String::new()));
                            let request: HandlingRequest = HandlingRequest {
                                request: request.data.clone(),
                                finished: Arc::clone(&work_finished),
                                result: Arc::clone(&work_result),
                                translate: true,
                                client: stream.peer_addr().unwrap().to_string()
                            };
                            let request: Arc<HandlingRequest> = Arc::new(request);
                            handle_request(Arc::clone(&request), Arc::clone(&wi), Arc::clone(&cap));
                            // Wait for task to finish
                            let &(ref lock, ref cvar) = &*request.finished;
                            let mut finished = lock.lock().unwrap();
                            while !*finished {
                                finished = cvar.wait(finished).unwrap();
                            }
                            // Get result
                            let result = request.result.lock().unwrap();

                            Response {
                                result_type: "Translated".to_string(),
                                data: format!("{}", result),
                                valid: is_valid && result.starts_with("Met") && result.ends_with("STOP"), 
                            }
                        }
                        _ => {
                            Response {
                                result_type: "Error".to_string(),
                                data: "Unknown request type".to_string(),
                                valid: false,
                            }
                        }
                    };
                    let response_json = serde_json::to_string(&response).unwrap();
                    stream.write(response_json.as_bytes()).unwrap();
                    stream.flush().unwrap();
                }
            }
            Steal::Empty => {
                // if waits < max_waits {
                //     waits += 1;
                //     println!("Thread {:?} is waiting", thread::current().id());
                //     thread::sleep(std::time::Duration::from_millis(100));
                // } else {
                //     println!("Thread {:?} is done", thread::current().id());
                //     break;
                // }
                println!("[Server] Request-handler {:?} is done", thread::current().id());
                // reduce the number of workers
                capacities.num_request_workers.fetch_sub(1, std::sync::atomic::Ordering::Relaxed);
                break;
            }
            Steal::Retry => {
                println!("[Server] Request-handler {:?} is retrying", thread::current().id());
            }
        }
    }
}

fn handle_request(request: Arc<HandlingRequest>, work_injector: Arc<Injector<Arc<Task>>>, capacities: Arc<Capacities>) {

    let mut task_list: Vec<Arc<Task>> = Vec::new();
    // num workers as max number of workers
    let num_workers = capacities.max_work_workers;
    let mut num_workers_per_request = capacities.max_work_workers_per_request;

    // if the request is too small, use only one worker
    if request.request.len() <= capacities.minimum_codon_processing_unit * 3 {
        num_workers_per_request = 1;
    }

    let mut request_finished = request.finished.0.lock().unwrap();
    let mut request_result = request.result.lock().unwrap();

    let request_string = &request.request;
    let request_length = request_string.len();

    // better also divide based on workload: If the workload is small, large number of workers is not necessary
    let divided_workload = workload_divider(request_length, num_workers_per_request, true);

    let mut current_pos = 0;

    // Push some tasks to the injector.
    for i in 0..num_workers_per_request {
        // generate a task and push to injector and tasklist
        let work_finished = Arc::new((Mutex::new(false), Condvar::new()));
        let work_result = Arc::new(Mutex::new(String::new()));
        let task = Arc::new(Task {
            // use iTTTTTTTTT as the request
            request: request_string[current_pos..current_pos + divided_workload[i]].to_string(),
            finished: Arc::clone(&work_finished),
            result: Arc::clone(&work_result),
            translate: request.translate,
            client: request.client.clone()
        });
        work_injector.push(task.clone());
        task_list.push(task.clone());
        current_pos += divided_workload[i];
    }

    ///////////////// Spawn new workers as necessary ////////////////////
    // print the number of workers
    // println!("[Server] Number of workers: {}", capacities.num_work_workers.load(std::sync::atomic::Ordering::Acquire));
    // print the worker capacity
    // println!("[Server] Worker capacity: {}", capacities.max_work_workers);
    // let mut handles = Vec::new();
    let num_work_workers = capacities.num_work_workers.load(std::sync::atomic::Ordering::Relaxed) as usize;
    println!("Number of work workers: {}", num_work_workers);

    let mut workers_to_spawn = num_workers.checked_sub(num_work_workers).unwrap_or(0);

    if num_workers_per_request < workers_to_spawn {
        workers_to_spawn = num_workers_per_request;
    }

    println!("Spawning {} new workers", workers_to_spawn);

    for _ in 0..workers_to_spawn {
        let injector = Arc::clone(&work_injector);
        let cap: Arc<Capacities> = Arc::clone(&capacities);

        // Each thread will have its own worker.
        let handle = thread::spawn(move || {
            run_worker(injector, cap);
        });
    }

    // add the number of workers to the capacities
    capacities.num_work_workers.fetch_add(workers_to_spawn as u16, std::sync::atomic::Ordering::Relaxed);

    ///////////////////////////////////////////////////////////////////

    // Initialize an empty string to store all results
    let mut results = String::new();

    // wait for all notifications on the condition variables
    for task in task_list {
        let &(ref lock, ref cvar) = &*task.finished;
        let mut finished = lock.lock().unwrap();
        while !*finished {
            finished = cvar.wait(finished).unwrap();
        }
        // Append the result to the results string instead of printing it
        results.push_str(&format!("{}", *task.result.lock().unwrap()));
    }

    // Set the request result to the results string
    *request_result = results;
    // Set the request finished to true
    *request_finished = true;
    // Notify the request condition variable
    request.finished.1.notify_one();

    // // Wait for all threads to complete.
    // for handle in handles {
    //     handle.join().unwrap();
    // }
}

fn start_server(capacities: Arc<Capacities>) {
    println!("[Server] 🛈: Starting Server on Machine with {} cores", num_cpus::get());

    // start listener
    let listener = TcpListener::bind("0.0.0.0:8080").expect("Failed to bind to address");
    println!("[Server] Listening on port 8080...");

    // create injector for requests
    let request_injector: Arc<Injector<TcpStream>> = Arc::new(Injector::new());
    // create injector for tasks
    let work_injector: Arc<Injector<Arc<Task>>> = Arc::new(Injector::new());

    for stream in listener.incoming() {
        match stream {
            Ok(stream) => {
                println!("[Server] New connection: {}", stream.peer_addr().unwrap());
                // push stream to request injector
                request_injector.push(stream);
                // run handler, if less than max workers
                if capacities.num_request_workers.load(std::sync::atomic::Ordering::Relaxed) < capacities.max_request_workers as u16 {
                    let injector = Arc::clone(&request_injector);
                    let work_injector = Arc::clone(&work_injector);
                    let wcapacities = Arc::clone(&capacities);
                    let handle = thread::spawn(move || {
                        run_request_handler(injector, work_injector, wcapacities);
                    });
                    capacities.num_request_workers.fetch_add(1, std::sync::atomic::Ordering::Relaxed);
                }
            }
            Err(e) => {
                println!("[Server] Failed to establish a connection: {:?}", e);
            }
        }
    }
}

/////////////////////// Main Function ///////////////////////////

fn main() {
    // init capacities
    let capacities = Arc::new(Capacities {
        max_request_workers: 2,
        num_request_workers: AtomicU16::new(0),
        max_work_workers: 4,
        max_work_workers_per_request: 2,
        num_work_workers: AtomicU16::new(0),
        minimum_codon_processing_unit: 3,
    });
    start_server(capacities);
}

// TODO:    - To launch the server, the command should be:
//              ./server port
//          - Prettier prints for client and server
//          - do the tests
//          - do the report 